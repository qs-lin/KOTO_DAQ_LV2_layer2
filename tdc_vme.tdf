--
----  2003 by Mircea Bogdan
----  2019 extended by Qisen 
--

title "vme block";

include "lpm_counter.inc";

subdesign tdc_vme

(

  vmewrite          : input;      -- qualifies address value (0=Read, 1=Write)
  vmeas             : input;      -- signal for latching address - used for data also, in Pulsar
  vmeds             : input;      -- signal for latching data - not used in Pulsar
 
  id                : input;      -- which chip am I? (2 chips on board)
  sysclk            : input;      -- VME system clock or other clock(possibly useful) 
   -- VME I/O
  addr[26..2]       : input;      -- address (minus GA, unused 26-24,1-0)
  data[31..0]       : bidir;      -- vme data lines
 -- rd_data0[31..0]     : input;        -- data from memory0 for VME read-out
  rd_data1[31..0]   : input;
  rd_data2[31..0]   : input;
  rd_data3[31..0]   : input;
  rd_data4[31..0]   : input;
  rd_data5[31..0]   : input;
  rd_data6[31..0]   : input;
  rd_data7[31..0]   : input;
  rd_data8[31..0]   : input;
  rd_data9[31..0]   : input;
 
 
  status_bus0[31..0]    : input;
  status_bus1[31..0]    : input;
  status_bus2[31..0]    : input;
  status_bus3[31..0]    : input;
  status_bus4[31..0]    : input;
  
  status_reg100[31..0]  : input;
  status_reg101[31..0]  : input;
  status_reg102[31..0]  : input;
  status_reg103[31..0]  : input;
  status_reg104[31..0]  : input;
  status_reg105[31..0]  : input;
  status_reg106[31..0]  : input;
  status_reg107[31..0]  : input;
  status_reg108[31..0]  : input;
  status_reg109[31..0]  : input;
  status_reg110[31..0]  : input;
  status_reg111[31..0]  : input;
  status_reg112[31..0]  : input;
  status_reg113[31..0]  : input;
  status_reg114[31..0]  : input;
  status_reg115[31..0]  : input;
  status_reg116[31..0]  : input;
  status_reg117[31..0]  : input;
  status_reg118[31..0]  : input;
  status_reg119[31..0]  : input;
  status_reg120[31..0]  : input;


    
  test_mode         : output;     -- puts the chip in test mode: write memories, registers,etc.
  reset             : output;     -- resets the chip
  ena_simu          : output;     -- switch from real data to test data
  SPI_start         : output;
  
  vmel2a_mode       : output;     -- switch level2 accept from DAQ to VME
  reset1            : output;     -- one more reset  
  halt_mode         : output;     -- freeze content of memories
  
  vme_wr_en1        : output;
  vme_wr_en2        : output;
  vme_wr_en3        : output;
  vme_wr_en4        : output;
  vme_wr_en5        : output;
  vme_wr_en6        : output;
  vme_wr_en7        : output;
  vme_wr_en8        : output;  
  
  
  register1[31..0]  : output;     -- VME accessible control register
  register2[31..0]  : output;     -- same
  register3[31..0]  : output;     -- same
  register4[31..0]  : output;     -- same
  register5[31..0]  : output;     -- same
  register6[31..0]  : output;     -- same
  register7[31..0]  : output;     -- same
  register8[31..0]  : output;     -- same
  
  reg20[31..0]  : output;     -- same
  reg21[31..0]  : output;     -- same
  reg22[31..0]  : output;     -- same
  reg23[31..0]  : output;     -- same
  reg24[31..0]  : output;     -- same
  reg25[31..0]  : output;     -- same
  reg26[31..0]  : output;     -- same
  reg27[31..0]  : output;     -- same
  reg28[31..0]  : output;     -- same
  reg29[31..0]  : output;     -- same
  reg30[31..0]  : output;     -- same
  reg31[31..0]  : output;     -- same
  reg32[31..0]  : output;     -- same
  reg33[31..0]  : output;     -- same
  reg34[31..0]  : output;     -- same
  reg35[31..0]  : output;     -- same
  reg36[31..0]  : output;     -- same
  reg37[31..0]  : output;     -- same
  reg38[31..0]  : output;     -- same
  reg39[31..0]  : output;     -- same


  




  

  


)
variable
  testdatamodereg  : dff;       -- test data mode register
  testdatamode     : node;      -- alias for test data mode register
  haltmodereg      : dff;       -- halt mode register
  haltmode         : node;      -- alias for halt mode register
  testmodereg      : dff;       -- test mode register
  testmode         : node;      -- alias for test mode register
  vmel2amodereg    : dff;       -- vmel2a mode register
  vmel2amode       : node;      -- alias for vmel2a mode register
  ctrlreg1[31..0]  : dff;       -- misc control registers
  ctrlreg2[31..0]  : dff;       -- misc control registers
  ctrlreg3[31..0]  : dff;       -- misc control registers
  ctrlreg4[31..0]  : dff;       -- misc control registers
  ctrlreg5[31..0]  : dff;       -- misc control registers
  ctrlreg6[31..0]  : dff;       -- misc control registers
  ctrlreg7[31..0]  : dff;       -- misc control registers
  ctrlreg8[31..0]  : dff;       -- misc control registers
  m_ctrlreg20[31..0]  : dff;        -- misc control registers
  m_ctrlreg21[31..0]  : dff;        -- misc control registers
  m_ctrlreg22[31..0]  : dff;        -- misc control registers
  m_ctrlreg23[31..0]  : dff;        -- misc control registers
  m_ctrlreg24[31..0]  : dff;        -- misc control registers
  m_ctrlreg25[31..0]  : dff;        -- misc control registers
  m_ctrlreg26[31..0]  : dff;        -- misc control registers
  m_ctrlreg27[31..0]  : dff;        -- misc control registers
  m_ctrlreg28[31..0]  : dff;        -- misc control registers
  m_ctrlreg29[31..0]  : dff;        -- misc control registers
  m_ctrlreg30[31..0]  : dff;        -- misc control registers
  m_ctrlreg31[31..0]  : dff;        -- misc control registers
  m_ctrlreg32[31..0]  : dff;        -- misc control registers
  m_ctrlreg33[31..0]  : dff;        -- misc control registers
  m_ctrlreg34[31..0]  : dff;        -- misc control registers
  m_ctrlreg35[31..0]  : dff;        -- misc control registers
  m_ctrlreg36[31..0]  : dff;        -- misc control registers
  m_ctrlreg37[31..0]  : dff;        -- misc control registers
  m_ctrlreg38[31..0]  : dff;        -- misc control registers
  m_ctrlreg39[31..0]  : dff;        -- misc control registers

  
 
  -- tri-state buffers for VME data lines
  datatri[31..0]  : tri_state_node;
  dataout[31..0]  : tri;        -- vme readout gets muxed here

  -- nodes holding results of VME address decoding
  vme_reset       : node;       -- reset output for chip
  vme_reset1      : node;      -- reset output for chip
  vme_ena_simu    : node;
  vme_SPI_start   : node;
  vme_testmodewrite : node;     -- write test mode register
  vme_testdatamodewrite : node;     -- write test mode register
  vme_haltmodewrite : node;     -- write test mode register
  vme_vmel2amodewrite : node;   -- write vmel2a mode register
  vme_ctrlwrite1   : node;      -- write control register1
  vme_ctrlwrite2   : node;      -- write control register2
  vme_ctrlwrite3   : node;      -- write control register3
  vme_ctrlwrite4   : node;      -- write control register4
  vme_ctrlwrite5   : node;      -- write control register5
  vme_ctrlwrite6   : node;      -- write control register6
  vme_ctrlwrite7   : node;      -- write control register7
  vme_ctrlwrite8   : node;      -- write control register8
  m_ctrlwrite20   : node;
  m_ctrlwrite21   : node;
  m_ctrlwrite22   : node;
  m_ctrlwrite23   : node;
  m_ctrlwrite24   : node;
  m_ctrlwrite25   : node;
  m_ctrlwrite26   : node;
  m_ctrlwrite27   : node;
  m_ctrlwrite28   : node;
  m_ctrlwrite29   : node;
  m_ctrlwrite30   : node;
  m_ctrlwrite31   : node;
  m_ctrlwrite32   : node;
  m_ctrlwrite33   : node;
  m_ctrlwrite34   : node;
  m_ctrlwrite35   : node;
  m_ctrlwrite36   : node;
  m_ctrlwrite37   : node;
  m_ctrlwrite38   : node;
  m_ctrlwrite39   : node;  


begin
 
  -- drive VME data lines from tri-state buffers
  data[] = datatri[];
  datatri[] = dataout[].out;


  -- put chip in "test-mode" by writing H"1" on address H"F"
  -- put chip in "operation-mode" by writing H"0" on address H"F"
  vme_testmodewrite = vmeas & vmewrite & (addr[25..2]==H"F");
  testmodereg.d = data[0];
  testmodereg.clk =  vme_testmodewrite;
  testmode = testmodereg.q;

  -- put chip in "test-data-mode" by writing H"1" on address H"D"
  -- put chip in "real-data-mode" by writing H"0" on address H"D"
  vme_testdatamodewrite = vmeas & vmewrite & (addr[25..2]==H"D");
  testdatamodereg.d = data[0];
  testdatamodereg.clk =  vme_testdatamodewrite;
  testdatamode = testdatamodereg.q;

 -- put chip in "halt-mode" by writing H"1" on address H"C"
  -- put chip in "run-mode" by writing H"0" on address H"C"
  vme_haltmodewrite = vmeas & vmewrite & (addr[25..2]==H"C");
  haltmodereg.d = data[0];
  haltmodereg.clk =  vme_haltmodewrite;
  haltmode = haltmodereg.q;

  -- put chips in "vmel2-mode" by writing H"1" on address H"B"
  -- put chips in "daql2-mode" by writing H"1" on address H"0"
  vme_vmel2amodewrite = vmeas & vmewrite & (addr[25..2]==H"B");
  vmel2amodereg.d = data[0];
  vmel2amodereg.clk =  vme_vmel2amodewrite;
  vmel2amode = vmel2amodereg.q;

  -- write registers via vme - (chip has to be in "test-mode"
  vme_ctrlwrite1 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"1");
  vme_ctrlwrite2 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"2");
  vme_ctrlwrite3 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"3");
  vme_ctrlwrite4 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"4");
  vme_ctrlwrite5 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"5");
  vme_ctrlwrite6 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"6");
  vme_ctrlwrite7 = vmeas & vmewrite &(addr[26]==id)&(addr[25..2]==H"7");
  vme_ctrlwrite8 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"8");

  
  m_ctrlwrite20 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"20");
  m_ctrlwrite21 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"21");
  m_ctrlwrite22 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"22");
  m_ctrlwrite23 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"23");
  m_ctrlwrite24 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"24");
  m_ctrlwrite25 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"25");
  m_ctrlwrite26 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"26");
  m_ctrlwrite27 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"27");
  m_ctrlwrite28 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"28");
  m_ctrlwrite29 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"29");
  m_ctrlwrite30 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"30");
  m_ctrlwrite31 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"31");
  m_ctrlwrite32 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"32");
  m_ctrlwrite33 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"33");
  m_ctrlwrite34 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"34");
  m_ctrlwrite35 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"35");
  m_ctrlwrite36 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"36");
  m_ctrlwrite37 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"37");
  m_ctrlwrite38 = vmeas & vmewrite &(testmode==H"1")&(addr[26]==id)&(addr[25..2]==H"38");
  m_ctrlwrite39 = vmeas & vmewrite &(addr[26]==id)&(addr[25..2]==H"39");
 

  
  ctrlreg1[].d = data[];
  ctrlreg1[].clk = vme_ctrlwrite1;
  ctrlreg2[].d = data[];
  ctrlreg2[].clk = vme_ctrlwrite2;
  ctrlreg3[].d = data[];
  ctrlreg3[].clk = vme_ctrlwrite3;
  ctrlreg4[].d = data[];
  ctrlreg4[].clk = vme_ctrlwrite4;
  ctrlreg5[].d = data[];
  ctrlreg5[].clk = vme_ctrlwrite5;
  ctrlreg6[].d = data[];
  ctrlreg6[].clk = vme_ctrlwrite6;
  ctrlreg7[].d = data[];
  ctrlreg7[].clk = vme_ctrlwrite7;
  ctrlreg8[].d = data[];
  ctrlreg8[].clk = vme_ctrlwrite8;
  
  m_ctrlreg20[].d = data[];
  m_ctrlreg20[].clk = m_ctrlwrite20; 
  m_ctrlreg21[].d = data[];
  m_ctrlreg21[].clk = m_ctrlwrite21; 
  m_ctrlreg22[].d = data[];
  m_ctrlreg22[].clk = m_ctrlwrite22; 
  m_ctrlreg23[].d = data[];
  m_ctrlreg23[].clk = m_ctrlwrite23; 
  m_ctrlreg24[].d = data[];
  m_ctrlreg24[].clk = m_ctrlwrite24; 
  m_ctrlreg25[].d = data[];
  m_ctrlreg25[].clk = m_ctrlwrite25; 
  m_ctrlreg26[].d = data[];
  m_ctrlreg26[].clk = m_ctrlwrite26; 
  m_ctrlreg27[].d = data[];
  m_ctrlreg27[].clk = m_ctrlwrite27; 
  m_ctrlreg28[].d = data[];
  m_ctrlreg28[].clk = m_ctrlwrite28; 
  m_ctrlreg29[].d = data[];
  m_ctrlreg29[].clk = m_ctrlwrite29;   

  m_ctrlreg30[].d = data[];
  m_ctrlreg30[].clk = m_ctrlwrite30; 
  m_ctrlreg31[].d = data[];
  m_ctrlreg31[].clk = m_ctrlwrite31; 
  m_ctrlreg32[].d = data[];
  m_ctrlreg32[].clk = m_ctrlwrite32; 
  m_ctrlreg33[].d = data[];
  m_ctrlreg33[].clk = m_ctrlwrite33; 
  m_ctrlreg34[].d = data[];
  m_ctrlreg34[].clk = m_ctrlwrite34; 
  m_ctrlreg35[].d = data[];
  m_ctrlreg35[].clk = m_ctrlwrite35; 
  m_ctrlreg36[].d = data[];
  m_ctrlreg36[].clk = m_ctrlwrite36; 
  m_ctrlreg37[].d = data[];
  m_ctrlreg37[].clk = m_ctrlwrite37; 
  m_ctrlreg38[].d = data[];
  m_ctrlreg38[].clk = m_ctrlwrite38; 
  m_ctrlreg39[].d = data[];
  m_ctrlreg39[].clk = m_ctrlwrite39;    
   
  
  -- write memories via vme - (chip has to be in "test-mode")
 
   vme_wr_en1 = vmewrite & (addr[26]== id)& (addr[25..20]==H"11") & (testmode==H"1");
   vme_wr_en2 = vmewrite & (addr[26]== id)& (addr[25..20]==H"12") & (testmode==H"1");  
   vme_wr_en3 = vmewrite & (addr[26]== id)& (addr[25..20]==H"13") & (testmode==H"1");
   vme_wr_en4 = vmewrite & (addr[26]== id)& (addr[25..20]==H"14") & (testmode==H"1");  
   vme_wr_en5 = vmewrite & (addr[26]== id)& (addr[25..20]==H"15") & (testmode==H"1");
   vme_wr_en6 = vmewrite & (addr[26]== id)& (addr[25..20]==H"16") & (testmode==H"1");  
   vme_wr_en7 = vmewrite & (addr[26]== id)& (addr[25..20]==H"17") & (testmode==H"1");
 
  -- do reset via vme (chip has to be in "test-mode") - works on bouth chips at once
   vme_reset = vmeas & vmewrite &(testmode==H"1")&(addr[25..2]==H"11");
   vme_reset1 = vmeas & vmewrite &(testmode==H"1")&(addr[25..2]==H"12");
   vme_SPI_start = vmeas & vmewrite &(testmode==H"1")&(addr[25..2]==H"13");
   vme_ena_simu = vmeas & vmewrite &(addr[25..2]==H"14");
  -- read memorys via vme
 
  if (addr[25..20]==H"1") then
    dataout[].in = rd_data1[];
  end if;
  if (addr[25..20]==H"2") then
    dataout[].in = rd_data2[];
  end if;
  if (addr[25..20]==H"3") then
    dataout[].in = rd_data3[];
  end if;
  if (addr[25..20]==H"4") then
    dataout[].in = rd_data4[];
  end if;
  if (addr[25..20]==H"5") then
    dataout[].in = rd_data5[];
  end if;
  if (addr[25..20]==H"6") then
    dataout[].in = rd_data6[];
  end if;
  if (addr[25..20]==H"7") then
    dataout[].in = rd_data7[];
  end if;
  if (addr[25..20]==H"8") then
    dataout[].in = rd_data8[];
  end if;
 if (addr[25..20]==H"9") then
    dataout[].in = rd_data9[];
  end if;

  
  
  -- read DEADBE and status registers via vme
  if ((addr[26]== id) & (addr[25..2]==H"0")) then 
    dataout[31..8].in = H"fce115";
    dataout[7].in = GND;
    dataout[6].in = GND;
    dataout[5].in = GND;
    dataout[4].in = vmel2amode;
    dataout[3].in = haltmode;
    dataout[2].in = testmode;
    dataout[1].in = testdatamode;
    dataout[0].in = id;
  end if;
  
  -- read status_bus via vme
  if ((addr[26]== id) & (addr[25..2]==H"A")) then 
    dataout[].in = status_bus0[];
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"B")) then 
    dataout[].in = status_bus1[];
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"C")) then 
    dataout[].in = status_bus2[];
  end if; 
  if ((addr[26]== id) & (addr[25..2]==H"D")) then 
    dataout[].in = status_bus3[];
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"E")) then 
    dataout[].in = status_bus4[];
  end if; 

   if ((addr[26]== id) & (addr[25..2]==H"100")) then 
    dataout[].in = status_reg100[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"101")) then 
    dataout[].in = status_reg101[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"102")) then 
    dataout[].in = status_reg102[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"103")) then 
    dataout[].in = status_reg103[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"104")) then 
    dataout[].in = status_reg104[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"105")) then 
    dataout[].in = status_reg105[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"106")) then 
    dataout[].in = status_reg106[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"107")) then 
    dataout[].in = status_reg107[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"108")) then 
    dataout[].in = status_reg108[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"109")) then 
    dataout[].in = status_reg109[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"110")) then 
    dataout[].in = status_reg110[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"111")) then 
    dataout[].in = status_reg111[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"112")) then 
    dataout[].in = status_reg112[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"113")) then 
    dataout[].in = status_reg113[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"114")) then 
    dataout[].in = status_reg114[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"115")) then 
    dataout[].in = status_reg115[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"116")) then 
    dataout[].in = status_reg116[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"117")) then 
    dataout[].in = status_reg117[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"118")) then 
    dataout[].in = status_reg118[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"119")) then 
    dataout[].in = status_reg119[];
  end if;  
   if ((addr[26]== id) & (addr[25..2]==H"120")) then 
    dataout[].in = status_reg120[];
  end if;  
 
 
  
  
  -- read control reg via vme
  if ((addr[26]== id) & (addr[25..2]==H"1")) then
    dataout[].in = ctrlreg1[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"2")) then
    dataout[].in = ctrlreg2[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"3")) then
    dataout[].in = ctrlreg3[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"4")) then
    dataout[].in = ctrlreg4[].q;
  end if;
   if ((addr[26]== id) & (addr[25..2]==H"5")) then
    dataout[].in = ctrlreg5[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"6")) then
    dataout[].in = ctrlreg6[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"7")) then
    dataout[].in = ctrlreg7[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"8")) then
    dataout[].in = ctrlreg8[].q;
  end if;

  if ((addr[26]== id) & (addr[25..2]==H"20")) then
    dataout[].in = m_ctrlreg20[].q;
  end if;  
  if ((addr[26]== id) & (addr[25..2]==H"21")) then
    dataout[].in = m_ctrlreg21[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"22")) then
    dataout[].in = m_ctrlreg22[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"23")) then
    dataout[].in = m_ctrlreg23[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"24")) then
    dataout[].in = m_ctrlreg24[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"25")) then
    dataout[].in = m_ctrlreg25[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"26")) then
    dataout[].in = m_ctrlreg26[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"27")) then
    dataout[].in = m_ctrlreg27[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"28")) then
    dataout[].in = m_ctrlreg28[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"29")) then
    dataout[].in = m_ctrlreg29[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"30")) then
    dataout[].in = m_ctrlreg30[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"31")) then
    dataout[].in = m_ctrlreg31[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"32")) then
    dataout[].in = m_ctrlreg32[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"33")) then
    dataout[].in = m_ctrlreg33[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"34")) then
    dataout[].in = m_ctrlreg34[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"35")) then
    dataout[].in = m_ctrlreg35[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"36")) then
    dataout[].in = m_ctrlreg36[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"37")) then
    dataout[].in = m_ctrlreg37[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"38")) then
    dataout[].in = m_ctrlreg38[].q;
  end if;
  if ((addr[26]== id) & (addr[25..2]==H"39")) then
    dataout[].in = m_ctrlreg39[].q;
  end if;

   -- put data on the vme bus
  
  dataout[].oe = vmeas & !vmewrite & addr[26]==id;

  -- reset chip via vme
  reset = vme_reset;
  reset1 = vme_reset1;
  SPI_start = vme_SPI_start;
  ena_simu = vme_ena_simu;
  -- output VME registers for use inside big chip
  test_mode = testmode;  -- this is "H" if you write "1" at addr "F" and it stays like that
                         -- until you write "0" at addr "F".

  halt_mode = haltmode;  -- this is "H" if you write "1" at addr "C" and it stays like that
                         -- until you write "0" at addr "C".
  vmel2a_mode = vmel2amode;  -- this is "H" if you write "1" at addr "B" and it stays like that
                         -- until you write "0" at addr "B".


  register1[] = ctrlreg1[].q;  
  register2[] = ctrlreg2[].q;
  register3[] = ctrlreg3[].q;  
  register4[] = ctrlreg4[].q;
  register5[] = ctrlreg5[].q;  
  register6[] = ctrlreg6[].q;
  register7[] = ctrlreg7[].q;  
  register8[] = ctrlreg8[].q;
  
  reg20[] = m_ctrlreg20[].q;
  reg21[] = m_ctrlreg21[].q;
  reg22[] = m_ctrlreg22[].q;
  reg23[] = m_ctrlreg23[].q;
  reg24[] = m_ctrlreg24[].q;
  reg25[] = m_ctrlreg25[].q;
  reg26[] = m_ctrlreg26[].q;
  reg27[] = m_ctrlreg27[].q;
  reg28[] = m_ctrlreg28[].q;
  reg29[] = m_ctrlreg29[].q;
  reg30[] = m_ctrlreg30[].q;
  reg31[] = m_ctrlreg31[].q;
  reg32[] = m_ctrlreg32[].q;
  reg33[] = m_ctrlreg33[].q;
  reg34[] = m_ctrlreg34[].q;
  reg35[] = m_ctrlreg35[].q;
  reg36[] = m_ctrlreg36[].q;
  reg37[] = m_ctrlreg37[].q;
  reg38[] = m_ctrlreg38[].q;
  reg39[] = m_ctrlreg39[].q;

  
end;

